#lang rhombus/static/and_meta
import:
  lib("racket/base.rkt") as rkt
  lib("rhombus/private/amalgam.rkt")!evt
  "private/thread.rkt" as rkt_thd

export:
  thread
  Thread
  Semaphore
  Channel
  Synchronizable
  except_space class:
    evt.ProgressEvt
    evt.CommitEvt
  Evt
  only_space annot:
    evt.Evt

expr.macro 'thread:
              $(group_option_sequence
                | '~pool: $(pool :: Block)':
                    default pool = ': #false'
                | '~keep: $(keep :: Block)':
                    default keep = ': #false')
              $body
              ... ~nonempty':
  'Thread(fun (): $body; ...,
          ~pool $pool,
          ~keep $keep)'

namespace ~open:
  export: Thread
  class Thread(private hand):
    opaque
    internal _Thread
    implements evt.Evt
    private implements evt._Evt
    constructor (thunk :: Function.of_arity(0),
                 ~pool: pool :: maybe(Thread.Pool || Any.of(#'own)) = #false,
                 ~keep: keep :: maybe(Thread.Keep) = #false):
      super(rkt_thd.thread(thunk,
                           ~pool:
                             match pool
                             | pool :: Thread.Pool: pool.handle
                             | ~else: pool,
                           ~keep: keep))
    override property handle: hand
    private override property sync_handle: rkt.#{wrap-evt}(hand, fun (v): this)
    method wait(fail_k :: Function.of_arity(0) = Function.pass):
      rkt_thd.#{thread-wait}(hand, fail_k)
    method break(kind :: Thread.Break = #'interrupt):
      rkt.#{break-thread}(hand, match kind
                                | #'interrupt: #false
                                | #'hang_up: #'#{hang-up}
                                | #'terminate: #'terminate)
    method kill():
      rkt.#{kill-thread}(hand)

    export:
      from_handle
      sleep
      Break
      Pool
      Keep

    fun sleep(n :: NonnegReal):
      rkt.sleep(n)

    fun from_handle(hand) :~ Thread:
      ~who: who
      unless rkt.#{thread?}(hand)
      | error(~who: who, "not a thread handle",
              error.val(hand))
      _Thread(hand)

    enum Break:
      interrupt
      hang_up
      terminate

    class Pool(private hand):
      opaque
      internal _Pool
      constructor (n :: PosInt = processor_count()):
        super(rkt_thd.#{make-parallel-thread-pool}(n))    
      property handle: hand
      method close():
        rkt_thd.#{parallel-thread-pool-close}(hand)
      export:
        processor_count
        own
        from_handle
      fun processor_count():
        rkt_thd.#{processor-count}()
      def own = #'own
      fun from_handle(hand) :~ Pool:
        ~who: who
        unless rkt_thd.#{parallel-thread-pool?}(hand)
        | error(~who: who, "not a parallel thread pool handle",
                error.val(hand))
        _Pool(hand)

    enum Keep:
      results

namespace ~open:
  export: Semaphore
  class Semaphore(private hand):
    opaque
    internal _Semaphore
    implements evt.Evt
    private implements evt._Evt
    constructor (init :: NonnegInt = 0):
      super(rkt.#{make-semaphore}(init))
    override property handle: hand
    private override property sync_handle: rkt.#{wrap-evt}(hand, fun (v): this)
    method post():
      rkt.#{semaphore-post}(hand)
    method wait():
      rkt.#{semaphore-wait}(hand)
    method poll():
      rkt.#{semaphore-try-wait?}(hand)

    export:
      from_handle

  fun from_handle(hand) :: Semaphore:
    ~who: who
    unless rkt.#{semaphore?}(hand)
    | error(~who: who, "not a semaphore handle")
    _Semaphore(hand)

namespace ~open:
  export:
    Channel

  class Channel(private hand):
    export:
      only_space annot:
        PutEvt
    opaque
    internal _Channel
    implements evt.Evt
    constructor ():
      super(rkt.#{make-channel}())
    override property handle: hand
    method get():
      rkt.#{channel-get}(hand)
    method put(value):
      rkt.#{channel-put}(hand, value)
    method put_evt(value) :~ evt.Evt:
      PutEvt(rkt.#{channel-put-evt}(hand, value))

    class PutEvt(hand):
      implements evt.Evt
      private implements evt._Evt
      opaque
      override property handle: hand
      private override property sync_handle: rkt.#{wrap-evt}(hand, fun (e): this)

interface Synchronizable:
  extends evt.Evt
  override property handle: rkt.#{guard-evt}(fun (): as_evt().handle)
  method as_evt() :~ evt.Evt

class AlwaysEvt():
  implements evt.Evt
  private implements evt._Evt
  opaque
  override property handle: rkt.#{always-evt}
  private override property sync_handle: rkt.#{wrap-evt}(rkt.#{always-evt}, fun (b): this)

class NeverEvt():
  implements evt.Evt
  private implements evt._Evt
  opaque
  override property handle: rkt.#{never-evt}
  private override property sync_handle: rkt.#{wrap-evt}(rkt.#{never-evt}, fun (b): this)

namespace Evt:
  export:
    rename:
      evt.Evt.sync as sync
      evt.Evt.wrap as wrap
      evt.WrapReturn as WrapReturn
    always
    never

  def always = AlwaysEvt()
  def never = NeverEvt()
