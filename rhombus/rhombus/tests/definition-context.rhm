#lang rhombus/and_meta

space.enforest example:
  space_path #{rhombus/def_ctx_example}
  macro_definer macro
  meta_namespace example_meta:
    parse_syntax_class Parsed

expr.macro 'sub:
              $form
              ...
              $end':
  let ctx = syntax_meta.make_definition_context()
  ctx.add_definitions('$form; ...')
  ctx.call_using(
    fun ():
      match ctx.add_scopes(end)
      | '$(e :: example_meta.Parsed)':
          e
  )
  
check:
  sub:
    example.macro 'hi':
      '"ok"'
    hi
  ~is "ok"

check:
  sub:
    example.macro 'hi $post':
      '"also ok"'
    hi any_id
  ~is "also ok"

// like `sub`, but uses `call_to_expand_using`, which
// is more precisely right
expr.macro 'sub2:
              $form
              ...
              $end':
  let ctx = syntax_meta.make_definition_context()
  ctx.add_definitions('$form; ...')
  ctx.call_to_expand_using(
    end,
    fun (end):
      match end
      | '$(e :: example_meta.Parsed)':
          e
  )

check:
  sub2:
    example.macro 'hi':
      '"ok"'
    hi
  ~is "ok"

check:
  sub2:
    example.macro 'hi $post':
      '"also ok"'
    hi any_id
  ~is "also ok"


// interaction with syntax parameters
syntax_parameter.bridge current_favorite_color:
  '"blue"'
expr.macro 'favorite_color':
  syntax_parameter_meta.lookup('current_favorite_color')
expr.macro 'with_favorite_color $(new_color :: String): $body':
  let ctx = syntax_meta.make_definition_context()
  ctx.add_definitions('«syntax_parameter.relet current_favorite_color: '$new_color'»')
  ctx.call_using(
    fun():
      let '$(parsed_body :: expr_meta.Parsed)' = 'block: $body'
      let (a, b) = expr_meta.parse_all(parsed_body)
      b)
check favorite_color ~is "blue"
check: with_favorite_color "red":
         favorite_color
       ~is "red"
