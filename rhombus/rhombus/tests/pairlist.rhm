#lang rhombus
import:
  "version_guard.rhm"

block:
  import "static_arity.rhm"
  static_arity.check:
    PairList(v, ...)
    PairList.length(lst) ~method
    PairList.cons(a, d)
    PairList.get(lst, n) ~method
    PairList.first(lst)
    PairList.last(lst)
    PairList.rest(lst)
    PairList.map(lst, proc) ~method
    PairList.for_each(lst, proc) ~method
    List.filter(lst) ~method
    List.partition(lst, proc) ~method
    PairList.contains(lst, val, [eql]) ~method
    PairList.index(lst, val, [eql]) ~method
    PairList.find(lst, pred) ~method
    PairList.find_index(lst, pred) ~method
    PairList.remove(lst, val) ~method
    PairList.reverse(lst) ~method
    PairList.append(lst, ...) ~method
    PairList.drop(lst, n) ~method
    PairList.drop_last(lst, n) ~method
    PairList.take(lst, n) ~method
    PairList.take_last(lst, n) ~method
    PairList.sort(lst, [is_less]) ~method
    PairList.iota(n)
    PairList.to_list(lst) ~method
    PairList.to_sequence(lst) ~method

check:
  PairList.length(PairList[1, 2, 3])
  ~is 3

check:
  PairList.length({1, 2, 3})
  ~throws values(
    "PairList.length: " ++ error.annot_msg(),
    error.annot("PairList").msg,
    error.val({1, 2, 3}).msg,
  )

check:
  PairList[1] :: NonemptyPairList
  ~is PairList[1]

check:
  PairList[] :: NonemptyPairList
  ~throws "does not satisfy annotation"

block:
  use_static
  check:
    PairList[1, 2, 3].length()
    ~is 3
  check:
    PairList[1, 2, 3][0]
    ~is 1
  check:
    PairList[1, 2, 3].get(0)
    ~is 1
  check:
    PairList[1, 2, 3] ++ PairList[4, 5]
    ~is PairList[1, 2, 3, 4, 5]
  check:
    PairList[1, 2, 3] ++ [4, 5]
    ~throws values(
      "PairList.append: " ++ error.annot_msg(),
      error.annot("PairList").msg,
      error.val([4, 5]).msg,
    )
  check:
    PairList[1, 2, 3] ++ "oops"
    ~throws values(
      "PairList.append: " ++ error.annot_msg(),
      error.annot("PairList").msg,
      error.val("oops").msg
    )
  check:
    PairList[1, 2, 3].append(PairList[4, 5])
    ~is PairList[1, 2, 3, 4, 5]
  check:
    PairList[1, 2, 3].first
    ~is 1
  check:
    PairList[1, 2, 3].rest
    ~is PairList[2, 3]
  check:
    PairList(1, 2, 3).length()
    ~is 3
  check:
    def lst = PairList[1, 2, 3]
    lst.length()
    ~is 3
  check:
    def lst :: PairList = dynamic(PairList[1, 2, 3])
    lst.length()
    ~is 3
  check:
    def lst :~ PairList = dynamic(PairList[1, 2, 3])
    lst.length()
    ~is 3
  check:
    def lst :: PairList.of(Int) = dynamic(PairList[1, 2, 3])
    lst.length()
    ~is 3
  check:
    def PairList[v, ...] = dynamic(PairList[1, 2, 3])
    PairList[v, ...].length()
    ~is 3
  check:
    def lst :: PairList.of(PairList) = dynamic(PairList[PairList[1, 2, 3]])
    lst.first.length()
    ~is 3
  check:
    def lst :: PairList.of(Int) = dynamic(PairList[1, 2, 3])
    lst.rest.length()
    ~is 2
  check:
    def lst :: NonemptyPairList.of(PairList) = dynamic(PairList[PairList[1, 2, 3]])
    lst.first.length()
    ~is 3
  check:
    PairList.cons(1, PairList[2, 3])
    ~is PairList[1, 2, 3]
  check:
    PairList.cons(1, PairList[2, 3]).length()
    ~is 3

block:
  check:
    1 :: PairList
    ~throws "does not satisfy annotation"
  check:
    1 :: PairList.of(Any)
    ~throws "does not satisfy annotation"
  check:
    1 :: PairList.of(converting(fun (_): #false))
    ~throws "does not satisfy annotation"
  check:
    PairList[1, 2, 3] :: PairList.of(converting(fun (n :: Int): n+1))
    ~is PairList[2, 3, 4]
  check:
    1 :: NonemptyPairList
    ~throws "does not satisfy annotation"
  check:
    1 :: NonemptyPairList.of(Any)
    ~throws "does not satisfy annotation"
  check:
    1 :: NonemptyPairList.of(converting(fun (_): #false))
    ~throws "does not satisfy annotation"
  check:
    PairList[1, 2, 3] :: NonemptyPairList.of(converting(fun (n :: Int): n+1))
    ~is PairList[2, 3, 4]

block:
  check:
    dynamic(PairList[1, 2, 3]).length()
    ~is 3
  check:
    dynamic(PairList[1, 2, 3]).first
    ~is 1
  check:
    dynamic(PairList[1, 2, 3]).rest
    ~is PairList[2, 3]
  check:
    dynamic(PairList[1, 2, 3])[0]
    ~is 1
  check:
    dynamic(PairList[1, 2, 3]).get(0)
    ~is 1
  check:
    dynamic(PairList[1, 2, 3]) ++ PairList[4, 5]
    ~is PairList[1, 2, 3, 4, 5]
  check:
    dynamic(PairList[1, 2, 3]) ++ [4, 5]
    ~throws "cannot append a pair list and other value"
  check:
    dynamic(PairList[1, 2, 3]) ++ "oops"
    ~throws "cannot append a pair list and other value"
  check:
    dynamic(PairList[1, 2, 3]).append(PairList[4, 5])
    ~is PairList[1, 2, 3, 4, 5]

block:
  def [x, ...] = [1, 2, 3]
  check:
    PairList[x, ...]
    ~is PairList[1, 2, 3]
  check:
    PairList[x, ..., 0]
    ~is PairList[1, 2, 3, 0]
  check:
    PairList[0, x, ...]
    ~is PairList[0, 1, 2, 3]
  check:
    PairList[& [10, 11], & PairList[12, 13], x, ..., 0]
    ~is PairList[10, 11, 12, 13, 1, 2, 3, 0]
  check:
    PairList[PairList[x], ...]
    ~is PairList[PairList[1], PairList[2], PairList[3]]
  def [[z, ...], ...] = [[1, 2, 3], [4, 5]]
  check:
    PairList[PairList[z, ...], ...]
    ~is PairList[PairList[1, 2, 3], PairList[4, 5]]

block:
  def [x, ...] = [1, 2, 3]
  check:
    PairList(x, ...)
    ~is PairList[1, 2, 3]
  check:
    PairList(x, ..., 0)
    ~is PairList[1, 2, 3, 0]
  check:
    PairList(0, x, ...)
    ~is PairList[0, 1, 2, 3]
  check:
    PairList(& List(10, 11), & PairList(12, 13), x, ..., 0)
    ~is PairList[10, 11, 12, 13, 1, 2, 3, 0]
  check:
    PairList(PairList(x), ...)
    ~is PairList[PairList[1], PairList[2], PairList[3]]
  def [[z, ...], ...] = [[1, 2, 3], [4, 5]]
  check:
    PairList(PairList(z, ...), ...)
    ~is PairList[PairList[1, 2, 3], PairList[4, 5]]

check:
  def PairList[0] = PairList[0]
  ~completes

check:
  def PairList[0, _, ...] = PairList[0, 1, 2]
  ~completes

check:
  def PairList[0, x, ...] = PairList[0, 1, 2]
  [x, ...]
  ~is [1, 2]

check:
  def PairList[0, & rst] = PairList[0, 1, 2]
  rst
  ~is PairList[1, 2]

check:
  def PairList[0, 1, 2, _, ...] = PairList[0, 1, 2]
  ~completes

check:
  def PairList[0, 1, 2, x, ...] = PairList[0, 1, 2]
  [x, ...]
  ~is []

check:
  def PairList[0, 1, 2, & rst] = PairList[0, 1, 2]
  rst
  ~is PairList[]

check:
  match PairList[]
  | PairList.empty: "empty"
  | ~else: "other"
  ~is "empty"

check:
  match PairList[1]
  | PairList.empty: "empty"
  | ~else: "other"
  ~is "other"

check:
  use_static
  PairList[1, 2].reverse().reverse()
  ~is PairList[1, 2]

block:
  use_static
  check PairList[1, 2].map(fun (x): x + 1).reverse() ~is PairList[3, 2]
  block:
    def mutable sum = 0
    check PairList[1, 2].for_each(fun (x): sum := sum + x) ~is #void
    check sum ~is 3
  check PairList[1, 3, 2, 4].filter(~keep: (_ > 2)) ~is PairList[3, 4]
  check PairList[1, 3, 2, 4].filter(~skip: (_ > 2)) ~is PairList[1, 2]
  check PairList[1, 3, 2, 4].filter(~keep: (_ > 1), ~skip: (_ > 3)) ~is PairList[3, 2]
  check PairList[1, 3, 2, 4].filter(~keep: (_ > 2)).length() ~is 2
  check PairList[1, 3, 2, 4].partition((_ > 2)) ~is values(PairList[3, 4], PairList[1, 2])
  check:
    let (a, b) = PairList[1, 3, 2, 4].partition((_ > 2))
    [a.length(), b.length()]
    ~is [2, 2]

check:
  PairList.append(& PairList[PairList[1, 2], PairList[3], PairList[4, 5]]) ~is PairList[1, 2, 3, 4, 5]
  PairList[1, 2].append() ~is PairList[1, 2]
  PairList[1, 2].append(PairList[3]) ~is PairList[1, 2, 3]
  PairList[1, 2].append(PairList[3], PairList[4, 5]) ~is PairList[1, 2, 3, 4, 5]
  PairList[1, 2].append(3) ~throws values(
    "PairList.append: " ++ error.annot_msg(),
    error.annot("PairList").msg,
    error.val(3).msg,
  )

check:
  match PairList[]
  | PairList.cons(hd, tl): "no"
  | PairList[]: "empty"
  ~is "empty"

block:
  use_static
  check:
    2 in PairList[1, 2, 3] ~is #true
    4 in PairList[1, 2, 3] ~is #false
    PairList[1, 2, 3].contains(2) ~is #true
    PairList[1, 2, 3].contains(4) ~is #false
    PairList[1, 2, 3].contains(-3, fun (x, y): x == -y) ~is #true
    PairList[1, 2, 3].contains(-4, fun (x, y): x == -y) ~is #false

check:
  1 in dynamic(PairList[1, 2, 3]) ~is #true
  dynamic(PairList[1, 2, 3]).contains(1) ~is #true
  dynamic(PairList[1, 2, 3]).contains(-1, fun (x, y): x == -y) ~is #true

block:
  use_static
  check:
    PairList[1, 2, 3].index(2) ~is 1
    PairList[1, 2, 3].index(4) ~is #false
    PairList[1, 2, 3].index(-3, fun (x, y): x == -y) ~is 2
    PairList[1, 2, 3].index(-4, fun (x, y): x == -y) ~is #false

check:
  dynamic(PairList[1, 2, 3]).index(1) ~is 0
  dynamic(PairList[1, 2, 3]).index(-1, fun (x, y): x == -y) ~is 0

block:
  let bx = Box(1)
  let bx_copy = bx.copy()
  block:
    use_static
    check:
      bx_copy in PairList[bx] ~is #false
      PairList[bx].contains(bx_copy) ~is #false
      PairList[bx].contains(bx_copy, fun (x, y): x is_now y) ~is #true
  check:
    bx_copy in dynamic(PairList[bx]) ~is #false
    dynamic(PairList[bx]).contains(bx_copy) ~is #false
    dynamic(PairList[bx]).contains(bx_copy, fun (x, y): x is_now y) ~is #true

check:
  PairList[1, 2, 3].find(fun (x): x > 1) ~is 2
  PairList[1, 2, 3].find(fun (x): x > 10) ~is #false
  dynamic(PairList[1, 2, 3]).find(fun (x): x > 1) ~is 2
  PairList[1, 2, 3].find_index(fun (x): x > 1) ~is 1
  PairList[1, 2, 3].find_index(fun (x): x > 10) ~is #false
  dynamic(PairList[1, 2, 3]).find_index(fun (x): x > 1) ~is 1

check:
  PairList[1, 2, 3].remove(2) ~is PairList[1, 3]
  PairList[1, 2, 3].remove(4) ~is PairList[1, 2, 3]
  PairList[1, 2, 2, 3].remove(4) ~is PairList[1, 2, 2, 3]
  dynamic(PairList[1, 2, 3]).remove(1) ~is PairList[2, 3]

check:
  PairList[1, 2, 3].drop(2) ~is PairList[3]
  PairList.drop(PairList[1, 2, 3], 2) ~is PairList[3]
  PairList[1, 2, 3].drop_last(2) ~is PairList[1]
  PairList.drop_last(PairList[1, 2, 3], 2) ~is PairList[1]
  PairList[1, 2, 3].take(2) ~is PairList[1, 2]
  PairList.take(PairList[1, 2, 3], 2) ~is PairList[1, 2]
  PairList[1, 2, 3].take_last(2) ~is PairList[2, 3]
  PairList.take_last(PairList[1, 2, 3], 2) ~is PairList[2, 3]
  PairList[1, 2, 3].take(4) ~throws values(
    "list is shorter than the number of elements to take",
    "list length", "3",
    "number to take", "4",
  )
  PairList[1, 2, 3].take_last(4) ~throws values(
    "list is shorter than the number of elements to take",
    "list length", "3",
    "number to take", "4",
  )
  PairList[1, 2, 3].drop(4) ~throws values(
    "list is shorter than the number of elements to drop",
    "list length", "3",
    "number to drop", "4",
  )
  PairList[1, 2, 3].drop_last(4) ~throws values(
    "list is shorter than the number of elements to drop",
    "list length", "3",
    "number to drop", "4",
  )

check:
  PairList[1, 2, 3].sort() ~is PairList[1, 2, 3]
  PairList.sort(PairList[1, 2, 3]) ~is PairList[1, 2, 3]
  PairList[1, 2, 3].sort(fun (x, y): x > y) ~is PairList[3, 2, 1]
  PairList.sort(PairList[1, 2, 3], fun (x, y): x > y) ~is PairList[3, 2, 1]
  PairList["", "a", "ab"].sort() ~is PairList["", "a", "ab"]
  PairList.sort(PairList["", "a", "ab"]) ~is PairList["", "a", "ab"]
  PairList["", "a", "ab"].sort(fun (x, y): x > y) ~is PairList["ab", "a", ""]
  PairList.sort(PairList["", "a", "ab"], fun (x, y): x > y) ~is PairList["ab", "a", ""]

check:
  use_static
  PairList.rest(PairList[1, 2, 3]).map(math.abs)
  ~is PairList[2, 3]

check:
  use_static
  "no such thing" in PairList.empty
  ~is #false

check:
  use_static
  PairList.empty.contains("no such thing")
  ~is #false

check:
  use_static
  def PairList.empty && empty = dynamic(PairList[])
  "no such thing" in empty
  ~is #false

check:
  use_static
  def PairList.empty && empty = dynamic(PairList[])
  empty.contains("no such thing")
  ~is #false

block:
  use_static
  def l = PairList[1, 2, 3]
  def l2 = l ++ l
  check l.to_list() ~is [1, 2, 3]
  check l2.to_list() ~is [1, 2, 3, 1, 2, 3]
  check l2.to_list().length() ~is 6

block:
  use_static
  def lst = PairList["a", "b", "c"]
  check:
    for List (x in lst):
      x
    ~is ["a", "b", "c"]
  check:
    for List (x in PairList.to_sequence(lst)):
      x
    ~is ["a", "b", "c"]
  check:
    for List (x in lst.to_sequence()):
      x
    ~is ["a", "b", "c"]

block:
  check:
    PairList.to_sequence("oops")
    ~throws values(
      "PairList.to_sequence: " ++ error.annot_msg(),
      error.annot("PairList").msg,
      error.val("oops").msg,
    )
  check:
    ("oops" :~ PairList).to_sequence()
    ~throws values(
      "PairList.to_sequence: " ++ error.annot_msg(),
      error.annot("PairList").msg,
      error.val("oops").msg,
    )
  check:
    for List (x in "oops" :~ PairList):
      x
    ~throws values(
      "PairList.to_sequence: " ++ error.annot_msg(),
      error.annot("PairList").msg,
      error.val("oops").msg,
    )
  check:
    for List (x in PairList.to_sequence("oops")):
      x
    ~throws values(
      "PairList.to_sequence: " ++ error.annot_msg(),
      error.annot("PairList").msg,
      error.val("oops").msg,
    )
  check:
    for List (x in ("oops" :~ PairList).to_sequence()):
      x
    ~throws values(
      "PairList.to_sequence: " ++ error.annot_msg(),
      error.annot("PairList").msg,
      error.val("oops").msg,
    )

check:
  to_string(PairList[]) ~is "PairList[]"
  to_string(PairList[1, 2, 3]) ~is "PairList[1, 2, 3]"

check:
  def PairList[x, ..., y, ...] = PairList[1, 2]
  PairList[PairList[x, ...], PairList[y, ...]]
  ~is PairList[PairList[1, 2], PairList[]]

check:
  def PairList[x, ..., y, ... ~nonempty] = PairList[1, 2]
  PairList[PairList[x, ...], PairList[y, ...]]
  ~is PairList[PairList[1], PairList[2]]

check:
  def PairList[x :: Int, ..., y :: Int, ... ~nonempty, & tail] = PairList[1, 2, "a", "b"]
  PairList[PairList[x, ...], PairList[y, ...], tail]
  ~is PairList[PairList[1], PairList[2], PairList["a", "b"]]


check:
  def PairList[x, ..., 2, y, ...] = PairList[1, 2, 3, 4]
  PairList[PairList[x, ...], PairList[y, ...]]
  ~is PairList[PairList[1], PairList[3, 4]]

check:
  def PairList[& x, y, ...] = PairList[1, 2]
  PairList[x, PairList[y, ...]]
  ~is PairList[PairList[1, 2], PairList[]]

check:
  def PairList[x, ..., & y, z] = PairList[1, 2]
  PairList[PairList[x, ...], y, z]
  ~is PairList[PairList[1], PairList[], 2]

check:
  def PairList[x, ..., & y, z] = PairList[1, 2]
  PairList[[x, ...], y, z]
  ~is PairList[[1], PairList[], 2]

check:
  def PairList[x :: Int, ..., & y :: PairList.of(Int), z] = PairList[1, 2]
  PairList[PairList[x, ...], y, z]
  ~is PairList[PairList[1], PairList[], 2]

check:
  match PairList[1, "end", 2, 3, 4, "end", 5]
  | PairList[& PairList[x, ..., "end"], ..., z]:
      [[[x, ...], ...], z]
  ~is [[[1, "end", 2, 3, 4]], 5]

check:
  match PairList[1, "end", 2, 3, 4, "end", 5]
  | PairList[& PairList[x, ..., "end"], ..., z]:
      [[[x, ...], ...], z]
  ~is [[[1, "end", 2, 3, 4]], 5]

check:
  match PairList[1, "end", 2, 3, 4, "end", 5]
  | PairList[& PairList[x :: Int, ..., "end"], ..., z]:
      [[[x, ...], ...], z]
  ~is [[[1], [2, 3, 4]], 5]

check:
  PairList[each PairList[1, 2, 3], ...] ~is PairList[1, 2, 3]

// check element static info in `each`
block:
  use_static
  class Doggo(name):
    method bork():
      println("woof! " +& name)
  check:
    let lst :: PairList.of(Doggo) = PairList[Doggo("Spot"), Doggo("Rover")]
    Function.pass((each lst).bork(), ...)
    ~prints "woof! Spot\nwoof! Rover\n"

check:
  ("oops" :~ PairList)[0]
  ~throws values(
    "PairList.get: " ++ error.annot_msg(),
    error.annot("PairList").msg,
    error.val("oops").msg,
  )

version_guard.at_least "8.14.0.4":
  check:
    (PairList[1, 2, 3] :~ PairList)["oops"]
    ~throws values(
      "PairList.get: " ++ error.annot_msg(),
      error.annot("NonnegInt").msg,
      error.val("oops").msg,
    )
  check:
    (PairList[1, 2, 3] :~ PairList)[-1]
    ~throws values(
      "PairList.get: " ++ error.annot_msg(),
      error.annot("NonnegInt").msg,
      error.val(-1).msg,
    )

check:
  ("oops" :~ PairList).first
  ~throws values(
    "PairList.first: " ++ error.annot_msg(),
    error.annot("NonemptyPairList").msg,
    error.val("oops").msg,
  )

check:
  ("oops" :~ PairList).last
  ~throws values(
    "PairList.last: " ++ error.annot_msg(),
    error.annot("NonemptyPairList").msg,
    error.val("oops").msg,
  )

check:
  ("oops" :~ PairList).rest
  ~throws values(
    "PairList.rest: " ++ error.annot_msg(),
    error.annot("NonemptyPairList").msg,
    error.val("oops").msg,
  )

check:
  PairList.append("oops") ~throws values(
    "PairList.append: " ++ error.annot_msg(),
    error.annot("PairList").msg,
    error.val("oops").msg,
  )
  ("oops" :~ PairList).append() ~throws values(
    "PairList.append: " ++ error.annot_msg(),
    error.annot("PairList").msg,
    error.val("oops").msg,
  )
  ("oops" :~ PairList) ++ PairList[1, 2, 3] ~throws values(
    "PairList.append: " ++ error.annot_msg(),
    error.annot("PairList").msg,
    error.val("oops").msg,
  )

check:
  1 in ("oops" :~ PairList) ~throws values(
    "PairList.contains: " ++ error.annot_msg(),
    error.annot("PairList").msg,
    error.val("oops").msg,
  )
  ("oops" :~ PairList).contains(1) ~throws values(
    "PairList.contains: " ++ error.annot_msg(),
    error.annot("PairList").msg,
    error.val("oops").msg,
  )
  PairList[1, 2, 3].contains(1, "oops") ~throws values(
    "PairList.contains: " ++ error.annot_msg(),
    error.annot("Function.of_arity(2)").msg,
    error.val("oops").msg,
  )

// dependent result annotations
block:
  use_static
  def los :: PairList.of(String) = PairList["a", "b", "c"]
  check los.get(0).length() ~is 1
  check PairList.first(los).length() ~is 1
  check PairList.last(los).length() ~is 1
  check PairList.rest(los)[0].length() ~is 1
  check PairList.cons("zz", los)[0].length() ~is 2
  check los.drop(1)[0].length() ~is 1
  check los.take(1)[0].length() ~is 1
  check los.drop_last(1)[0].length() ~is 1
  check los.take_last(1)[0].length() ~is 1
  check los.reverse()[0].length() ~is 1
  check los.find((_ == "a")).length() ~is 1
  check los.remove("a")[0].length() ~is 1
  check los.filter(~keep: (_ == "a"))[0].length() ~is 1
  check los.sort((_ :: String < _))[0].length() ~is 1
  check los.to_list()[0].length() ~is 1
  check (for List (e in los.to_sequence()): e.length()) ~is [1, 1, 1]
  check (PairList["a"] ++ PairList["b"])[0].length() ~is 1

block:
  use_static
  def los = PairList["a", "b", "c"]
  check los.get(0).length() ~is 1

block:
  use_static
  def los = PairList("a", "b", "c")
  check los.get(0).length() ~is 1

check:
  ~eval
  use_static
  PairList["a1", "b", #"no"][0].length()
  ~throws values("length",
                 "no such field or method",
                 "based on static information")

check:
  ~eval
  use_static
  PairList["a1", "b", & PairList["c", #"no"]][0].length()
  ~throws values("length",
                 "no such field or method",
                 "based on static information")

check:
  ~eval
  use_static
  def PairList[x, ...] = PairList[1]
  PairList["a1", "b", x, ...][0].length()
  ~throws values("length",
                 "no such field or method",
                 "based on static information")

block:
  use_static
  let PairList[x, y] :: PairList.tuple_of[String, String]:
    dynamic(PairList["a", "b"])
  check x.length() ~is 1
  check y.length() ~is 1

block:
  use_static
  let xs :: PairList.tuple_of[String, ...]:
    dynamic(PairList["a", "bb"])
  check xs[0].length() ~is 1
  check xs[1].length() ~is 2

block:
  use_static
  let ps :: PairList.tuple_of[PairList.tuple_of[Bytes, String], ...]:
    dynamic(PairList[PairList[#"a", "a"], PairList[#"bb", "bb"]])
  check ps[0].length() ~is 2
  let PairList[PairList[pa, pa2], PairList[pb, pb2]] = ps
  check pa.length() ~is 1
  check pa2.length() ~is 1
  check pb.length() ~is 2
  check pb2.length() ~is 2

block:
  use_static
  let ps = PairList[PairList[#"a", "a"], PairList[#"bb", "bb"]]
  check ps[0].length() ~is 2
  let PairList[PairList[pa, pa2], PairList[pb, pb2]] = ps
  check pa.length() ~is 1
  check pa2.length() ~is 1
  check pb.length() ~is 2
  check pb2.length() ~is 2

block:
  use_static
  class Posn(x, y): nonfinal
  class Posn3D(z): extends Posn
  let PairList[x, y, ...] :: PairList.tuple_of[Posn3D, Posn, ...]:
    dynamic(PairList[Posn3D(1, 2, 3), Posn(4, 5), Posn(6, 7)])
  check x.z ~is 3
  check [y.y, ...] ~is [5, 7]
